apply plugin: "java"
apply plugin: "groovy"
apply plugin: "maven"

group = "org.sotnya"
version = "1.3.0"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
String propertiesFile = "./plugin-descriptor.properties"


description = """Ukrainian lemmatizer plugin for ElasticSearch"""

repositories {
    mavenCentral()

    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile group: "org.elasticsearch", name: "elasticsearch", version: "2.2.1"

    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: "net.java.dev.jna", name: "jna", version: "4.2.1"
    testCompile group: "org.apache.lucene", name: "lucene-test-framework", version: "5.4.1"
    testCompile group: "org.elasticsearch", name: "elasticsearch", version: "2.2.1", classifier: "tests"
    testCompile group: "org.hamcrest", name: "hamcrest-library", version: "1.3"
}

sourceSets {
    test {
        resources.srcDir new File("src/main/resources")
    }
}

File explodedDistDir = new File(distsDir, "exploded")

jar.manifest.mainAttributes("Implementation-Title": "ElasticSearch::Plugins::Analysis::UkrainianLemmatizer", "Implementation-Version": rootProject.version, "Implementation-Date": new Date().format("yyyy-MM-dd HH:mm:ss"))

task explodedDist(dependsOn: [jar], description: "Builds the plugin zip file") << {
    [explodedDistDir]*.mkdirs()

    copy {
        from configurations.compile
        into explodedDistDir
    }

    ant.delete { fileset(dir: explodedDistDir, includes: "asm*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "antlr*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "compress*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "commons-cli*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "elasticsearch-*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "guava*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "hamcrest*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "HdrHistogram*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "hppc*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "jackson*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "joda*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "jsr*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "junit*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "lucene-*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "netty-*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "securesm*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "snakeyaml*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "spatial4j-*.jar") }
    ant.delete { fileset(dir: explodedDistDir, includes: "t-digest*.jar") }

    copy {
        from libsDir
        into explodedDistDir
    }

    copy {
        from propertiesFile
        into explodedDistDir
    }
}

task zip(type: Zip, dependsOn: ["explodedDist"]) {
    from(explodedDistDir) {
    }
}

task release(dependsOn: [zip]) << {
    ant.delete(dir: explodedDistDir)
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = "full"
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}